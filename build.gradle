// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.71'
    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.1.1"
        classpath 'com.google.gms:google-services:4.3.3'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.0.0-beta02'
        classpath 'com.google.firebase:firebase-appdistribution-gradle:1.3.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.jraska.module.graph.assertion" version "1.1.0"
}

apply from: 'dependencies.gradle'

allprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//plugins {
//    id(GradlePluginId.KTLINT_GRADLE)
//    id(GradlePluginId.GRADLE_VERSION_PLUGIN)
//    id(GradlePluginId.KOTLIN_JVM) apply false
//    id(GradlePluginId.KOTLIN_ANDROID) apply false
//    id(GradlePluginId.KOTLIN_ANDROID_EXTENSIONS) apply false
//    id(GradlePluginId.ANDROID_APPLICATION) apply false
//    id(GradlePluginId.ANDROID_DYNAMIC_FEATURE) apply false
//    id(GradlePluginId.ANDROID_LIBRARY) apply false
//}
//
//// all projects = root project + sub projects
//allprojects {
//    repositories {
//        google()
//        jcenter()
//    }
//
//    // We want to apply ktlint at all project level because it also checks build gradle files
//    apply(plugin = GradlePluginId.KTLINT_GRADLE)
//
//    // Ktlint configuration for sub-projects
//    ktlint {
//        version.set(CoreVersion.KTLINT)
//        verbose.set(true)
//        android.set(true)
//
//        // Uncomment below line and run .\gradlew ktlintCheck to see check ktlint experimental rules
//        // enableExperimentalRules.set(true)
//
//        reporters {
//            reporter(ReporterType.CHECKSTYLE)
//        }
//
//        filter {
//            exclude { element -> element.file.path.contains("generated/") }
//        }
//    }
//}
//
//subprojects {
//    tasks.withType<Test> {
//        maxParallelForks = (Runtime.getRuntime().availableProcessors() / 2).takeIf { it > 0 } ?: 1
//    }
//
////    apply(plugin = GradlePluginId.DETEKT)
//
////    detekt {
////        config = files("${project.rootDir}/detekt.yml")
////        parallel = true
////    }
//}
//
//// JVM target applied to all Kotlin tasks across all sub-projects
//tasks.withType<KotlinCompile> {
//    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()
//}
//
//tasks {
//    // Gradle versions plugin configuration
//    "dependencyUpdates"(DependencyUpdatesTask::class) {
//        resolutionStrategy {
//            componentSelection {
//                all {
//                    // Do not show pre-release version of library in generated dependency report
//                    val rejected = kotlin.collections.listOf("alpha", "beta", "rc", "cr", "m", "preview")
//                        .map { qualifier -> kotlin.text.Regex("(?i).*[.-]$qualifier[.\\d-]*") }
//                        .any { it.matches(candidate.version) }
//                    if (rejected) {
//                        reject("Release candidate")
//                    }
//
//                    // kAndroid newest version is 0.8.8 (jcenter), however maven repository contains version 0.8.7 and
//                    // plugin fails to recognize it correctly
//                    if (candidate.group == "com.pawegio.kandroid") {
//                        reject("version ${candidate.version} is broken for ${candidate.group}'")
//                    }
//                }
//            }
//        }
//    }
//}
//
//task("staticCheck") {
//    description =
//        """Mimics all static checks that run on CI.
//        Note that this task is intended to run locally (not on CI), because on CI we prefer to have parallel execution
//        and separate reports for each check (multiple statuses eg. on github PR page).
//        """.trimMargin()
//
//    group = "verification"
//    afterEvaluate {
//        // Filter modules with "lintDebug" task (non-Android modules do not have lintDebug task)
//        val lintTasks = subprojects.mapNotNull { "${it.name}:lintDebug" }
//
//        // Get modules with "testDebugUnitTest" task (app module does not have it)
//        val testTasks = subprojects.mapNotNull { "${it.name}:testDebugUnitTest" }
//            .filter { it != "app:testDebugUnitTest" }
//
//        // All task dependencies
//        val taskDependencies =
//            mutableListOf("app:assembleAndroidTest", "ktlintCheck", "detekt").also {
//                it.addAll(lintTasks)
//                it.addAll(testTasks)
//            }
//
//        // By defining Gradle dependency all dependent tasks will run before this "empty" task
//        dependsOn(taskDependencies)
//    }
//}
